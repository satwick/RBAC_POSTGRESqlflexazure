Here‚Äôs the updated documentation including the **backup and restore note with the failure due to RBAC restrictions**, along with guidance on how to implement it correctly:

---

## **RBAC Configuration on Azure PostgreSQL Flexible Server**

### **1. Role Creation (e.g., Read-Only Role)**

```sql
CREATE ROLE <role_name>;
```

### **2. Grant Database Connect Privilege**

```sql
GRANT CONNECT ON DATABASE <db_name> TO <role_name>;
```

### **3. Schema Creation (If Not Already Created)**

```sql
CREATE SCHEMA <schema_name>;
```

### **4. Grant Privileges on the Schema**

```sql
GRANT USAGE ON SCHEMA <schema_name> TO <role_name>;
GRANT SELECT, INSERT, UPDATE ON ALL TABLES IN SCHEMA <schema_name> TO <role_name>;

ALTER DEFAULT PRIVILEGES IN SCHEMA <schema_name> 
GRANT SELECT, INSERT, UPDATE ON TABLES TO <role_name>;
```

---

### **5. Create Application User**

```sql
CREATE USER <username> WITH PASSWORD '<password>';
```

### **6. Assign Role to User**

```sql
GRANT <role_name> TO <username>;
```

---

### **7. Restrict Public Access**

```sql
REVOKE CONNECT ON DATABASE <db_name> FROM PUBLIC;
```

> Repeat this for each restricted database.

---

### **8. Grant Privileges for Sequences and Routines (if required)**

```sql
GRANT ALL ON ALL SEQUENCES IN SCHEMA supabase_functions TO postgres;
ALTER DEFAULT PRIVILEGES IN SCHEMA supabase_functions 
GRANT ALL ON SEQUENCES TO postgres;

GRANT ALL ON ALL ROUTINES IN SCHEMA supabase_functions TO postgres;
ALTER DEFAULT PRIVILEGES IN SCHEMA supabase_functions 
GRANT ALL ON ROUTINES TO postgres;
```

---

### **9. Application Configuration**

* Update DB secrets (username/password) at the application level.
* Regenerate and share connection strings using new user credentials.
* Secure credentials in a vault (e.g., Azure Key Vault).

---

### **10. Backup & Restore Consideration (RBAC Note)**

#### ‚úÖ **Observed Issue**:

While attempting to **back up and restore** the existing database to a new one using the **admin user (e.g., `postgres`)**, the operation **initially failed** because **some database objects (like tables and sequences)** were created by **application-level users**.

#### ‚ùó Root Cause:

* Admin user (`postgres`) lacked ownership or sufficient privileges on objects created by the application user.

#### üõ†Ô∏è **How to Handle This:**

**Option A: Assign Ownership Temporarily (for backup)**

```sql
-- Switch ownership to postgres before backup
ALTER TABLE <schema_name>.<table_name> OWNER TO postgres;
```

**Option B: Include All Roles During Backup**

* Use `pg_dumpall` or `pg_dump` with role preservation flags and appropriate credentials.
* Example:

  ```bash
  pg_dump -U postgres -Fc -d <db_name> --no-owner --no-acl > db_backup.dump
  ```

**Option C: Restore as Original Owner**

* Ensure the user who created objects is present in the target DB before restore.
* Or create a role with the same name and assign it ownership post-restore.

**Recommendation:**

* **Standardize object creation** by allowing only the admin or privileged role to create critical schema objects.
* Application users should have limited DML privileges (SELECT/INSERT/UPDATE) but not DDL.

---

Let me know if you'd like this exported to a PDF, Word doc, or Markdown file for documentation purposes.
